* 이벤트리스너의 경우, click 이벤트여야 하는데, 다른거 써서 실행 안되는거 등등... 이벤트 리스너 종류 오류 찾아내는 문제 

1. cosole 에 $ is not defined 뜨는 이유 :
제이쿼리 라이브러리 연결 안되어있어서  

(<script src="https://code.jquery.com/jquery-3.6.0.js"
        integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk="
         crossorigin="anonymous"></script>   써줘야함


2. div, span 차이
-div : 영역 설정시 줄바꿈됨, 박스 형태로 영역 설정, block 속성에 해당

-span : 영역 설정시 줄바꿈 안됨, 줄 단위로 영역설정, inline 속성에 해당

3. 원시타입, 참조타입
-원시타입 : number : 3.141592
	string : ‘Hanamon’
	boolean : true & false
	undefined : 변수가 정의되지 않았거나 값이 없다.
	null : 의도적으로 비어있음을 표현하기 위해 null 이라는 것이 들어있다.
	symbol
객체가 아니면서 method를 가지지 않는 6가지의 타입
“하나”의 정보, 즉, 데이터를 담고 있다.,  변수에 값(value) 자체가 담긴다.

-참조타입 : 보관함의 주소(reference)가 담긴다.
		원시 자료형이 아닌 모든 것은 참조 자료형. 
		배열, 객체, 함수 

4. classname 으로 불러오면 배열상태이므로, addeventlistener 할 수 없음.
    ***************
 	  //document.getElementsByTagName("p").style.color = "violet"
        //배열에 스타일 적용할 수 없으므로, 안됨

        const arr= document.getElementsByTagName("p");
        for(let el of arr){
            el.style.color = "violet";
        }
        //이렇게 배열에서 요소를 하나씩 꺼내서 적용하는건 가능하나 불편함

	  아래처럼 간단하게 할 수 있음
        $("h5 , p").css("backgroundColor", "yellow"); 


5. 자바스크립트 이벤트 종류
keydown	사용자가 키를 처음 눌렀을 때
keyup	키를 땔 때
keypress	사용자가 눌렀던 키의 문자가 입력되었을 때
 

마우스 이벤트 – 사용자가 마우스나 터치화면을 사용할 때 발생

이벤트	설명
click	사용자가 동일한 요소 위에서 마우스 버튼을 눌렀다 땔 때
dbclick	두 번 눌렀다 땔 때
mousedown	마우스를 누르고 있을 때
mouseup	눌렀던 마우스 버튼을 땔 때
mousemove	마우스를 움직였을 때
mouseover	요소 위로 마우스를 움직였을 때
mouseout	요소 바깥으로 마우스를 움직였을 때
 	 

포커스 이벤트 – 포커스 이벤트

이벤트	설명
focus	요소가 포커스를 얻었을 때
focusin	 
blur	요소가 포커스를 잃었을 때
focusout	 
 

폼 이벤트 - 폼이벤트

이벤트	설명
input	<input>,<textarea>요소 값이 변경되었을 때
change	선택 상자, 체크박스, 라디오 버튼의 상태가 변경되었을 때
submit	사용자가 버튼키를 이용하여 폼을 제출할 때
reset	리셋 버튼을 클릭할 때
cut	폼 필드의 콘텐츠를 잘라내기 했을 때
copy	폼 필드의 콘텐츠를 복사했을 때
paste	폼 필드의 콘텐츠를 붙여넣을 때
select	텍스트를 선택했을 때


6. Nan =  Not-a-Number : 나온 값이 숫자가 아니라는 얘기

7. html 기본구조 : 
-HTML 기본 구조 : 다음은 HTML 문서의 기본적인 구조를 보여주는 그림
1)<!DOCTYPE html> : 현재 문서가 HTML5 문서임을 명시합니다.
2)<html> : HTML 문서의 루트(root) 요소를 정의합니다.
		<head> : HTML 문서의 메타데이터(metadata)를 정의합니다.
			- 메타데이터(metadata)란 HTML 문서에 대한 정보(data)로 웹 브라우저에는 직접적으로 표현되지 않는 정보를 의미합니다.
			- 이러한 메타데이터는 <title>, <style>, <meta>, <link>, <script>, <base>태그 등을 이용하여 표현
3)<body> : 웹 브라우저를 통해 보이는 내용(content) 부분입니다.
		<h1> ~ <h6> : 제목(heading)을 나타냅니다.
		<p> : 단락(paragraph)을 나타냅니다.
		<div>

8. DOM 을 이용한 요소 접근 방법
(DOM(document object model)      웹문서(HTML)의 모든요소를 객체 형식으로 표현하는 방법
        ->문서 내 특정 요소에 접근하는 방법을 제공)
 1. id 속성값으로 접근하기
      document.getElementByID("id 속성값")

2. class 속성값으로 접근하기
      document.getElementsByClassName("class 속성값")

 3. name 속성값으로 접근하기
      document.getElementsByName("Name속성값")
      
 4. tag Name으로 접근하기 
      document.getElementsByTagName("태그명")
      
 5. CSS 선택자를 이용해서 접근하기
  1) document.querySelector("#test");  id 일때 #id이름, class 일때는 .class이름 으로 써주기
          -단일 요소를 선택하는 방법
          -만약 선택된 요소가 여러개이면 첫번째 요소만 선택한다.

  2)  document.querySelectorAll("CSS선택자");
          -선택된 모든요소를 얻어와 배열 형태 반환
            (각각의 index에 선택된 요소가 하나씩 있음)

9. getElementById, getElementsByClassName,    

10. clasname 일 때, 요소를 불러오는 태그이름  : getElementsByClassName

11. 자료형변환 
어떠한 데이터를 숫자형으로 변경하려면 Number()
요소의 내용 또는 값을 얻어오면 기본적으로 문자열(string)으로 인식됨
        ->덧셈 연산시 '더하기' 가 아닌'이어쓰기'가 되는 문제 발생

        1) parseInt(문자열) : "정수"    -> 정수("123" ->123 )
                           "실수"    ->정수("3.14" -> 3 ) 소수점 버림

       2)parseFloat(문자열) : "정수"    ->정수 ("123"  -> 123)
                           "실수"    ->정수("3.14" -> 3.14 ) 
       
        3)Number(문자열): "정수"    ->정수 ("123"  -> 123)
                          "실수"    ->정수("3.14" -> 3.14 )  (parseFloat보다 Number를 더 많이씀)

12. 자바스크립트 작성 3가지 : 
-태그에 직접 JS 코드를 작성(Inline)</li>
 예 )  <button type="button"  onclick="alert('inline버튼이 클릭되었습니다')">inline방식</button>
-html 내부에 script 태그를 이용하여 작성(internal)</li>
예)  <button type="button" onclick="btnclick1()">internal방식1</button>
 -html 외부에 파일(.js)을 이용해서 작성(external)</li>
예)  <button type="button" onclick="btnclick1()">external방식1</button>


13. 블록스코프, 함수스코프 차이
-블록스코프 : 블록({})내부에서 선언된 변수는 해당 블록에서만 접근 가능한
		let, const로 선언된 변수가 블록 스코프 방식을 따른다.
-함수스코프 : 함수 스코프는 함수에서 선언한 변수는 해당 함수 내에서만 접근 가능하다는 걸 의미
		만약 변수가 함수 내부에 선언된 것이 아니면 이 변수의 스코프는 전역 스코프(global)이므로 어디에서든 접근이 가능, var


*         var: 변수, 변수명 중복0(덮어쓰기), 함수 레벨 scope ({} 벗어나더라도 함수내에서는 사용가능)
        let: 변수, 변수명 중복X , 블록{} 레벨 scope ({} 내에서만 사용가능)
        const: 상수, 변수명 중복X, 블록{} 레벨 scope ({} 내에서만 사용가능)
